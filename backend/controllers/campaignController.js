import mongoose from 'mongoose';
import Customer from '../models/Customer.js';
import Campaign from '../models/Campaign.js';
import CommunicationLog from '../models/CommunicationLog.js';
import { sendCampaign } from '../services/vendorService.js';
import { logger } from '../utils/logger.js';
import axios from 'axios';


export const createCampaign = async (req, res) => {
  try {
    const { segmentRules, message } = req.body;
    if (!mongoose.isValidObjectId(req.user.id)) {
      throw new Error('Invalid user ID');
    }
    console.log('Creating campaign for user ID:', req.user.id);
    const audience = await Customer.find(segmentRules);
    const campaign = new Campaign({
      userId: new mongoose.Types.ObjectId(req.user.id),
      segmentRules,
      message,
      audienceSize: audience.length,
      communicationLogs: [],
    });
    await campaign.save();
    logger.info(`Campaign ${campaign._id} created for user ${req.user.id}`);
    await sendCampaign(campaign, audience);
    const updatedCampaign = await Campaign.findById(campaign._id).populate('communicationLogs');
    res.status(201).json(updatedCampaign);
  } catch (error) {
    logger.error(`Error creating campaign for user ${req.user?.id || 'unknown'}: ${error.message}`);
    res.status(500).json({ error: 'Failed to create campaign', details: error.message });
  }
};

export const getCampaignHistory = async (req, res) => {
  try {
    if (!mongoose.isValidObjectId(req.user.id)) {
      throw new Error('Invalid user ID');
    }
    console.log('Fetching campaigns for user ID:', req.user.id);
    const campaigns = await Campaign.find({ userId: new mongoose.Types.ObjectId(req.user.id) })
      .sort({ createdAt: -1 })
      .populate('communicationLogs');
    console.log('Campaigns found:', campaigns);
    const campaignsWithStats = campaigns.map((campaign) => {
      const sent = campaign.communicationLogs.filter(log => log.status === 'SENT').length;
      const failed = campaign.communicationLogs.filter(log => log.status === 'FAILED').length;
      return {
        ...campaign.toObject(),
        deliveryStats: { sent, failed },
      };
    });
    res.json(campaignsWithStats);
  } catch (error) {
    logger.error(`Error fetching campaign history for user ${req.user?.id || 'unknown'}: ${error.message}`);
    res.status(500).json({ error: 'Failed to fetch campaign history', details: error.message });
  }
};

export const generateMessage = async (req, res) => {
  try {
    const { prompt, customerData } = req.body;

    if (!prompt) {
      console.log('Prompt is required for AI message generation');
      return res.status(400).json({ error: 'Prompt is required' });
    }

    let fullPrompt = prompt;
    if (customerData) {
      fullPrompt += ` Customer data: ${JSON.stringify(customerData)}.`;
    }
    fullPrompt += ' Keep the message concise, under 100 characters, and suitable for a marketing campaign.';

    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'user',
            content: fullPrompt,
          },
        ],
        max_tokens: 50,
        temperature: 0.7,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
      }
    );

    let generatedMessage = response.data.choices[0]?.message?.content.trim() || '';
    if (!generatedMessage) {
      throw new Error('No message generated by AI');
    }

    // Return only the first sentence or 100 characters max
    generatedMessage = generatedMessage.split('.')[0].substring(0, 100);

    console.log('AI message generated successfully:', generatedMessage);
    res.status(200).json({ message: generatedMessage });
  } catch (error) {
    console.log('Error generating AI message:', error.message);
    res.status(500).json({ error: 'Failed to generate message with AI' });
  }
};