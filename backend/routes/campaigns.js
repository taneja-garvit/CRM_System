import express from 'express';
import { createCampaign, getCampaignHistory } from '../controllers/campaignController.js';
import authMiddleware from '../middleware/auth.js';
import { validateCampaign } from '../middleware/validate.js';
import axios from 'axios'

const router = express.Router();

/**
 * @swagger
 * /campaigns:
 *   post:
 *     summary: Create a new campaign
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               segmentRules: { type: object }
 *               message: { type: string }
 *     responses:
 *       201: { description: Campaign created }
 */
router.post('/', authMiddleware, validateCampaign, createCampaign);

/**
 * @swagger
 * /campaigns:
 *   get:
 *     summary: Get campaign history
 *     responses:
 *       200: { description: List of campaigns }
 */
router.get('/', authMiddleware, getCampaignHistory);


router.post('/generate-message', authMiddleware, async (req, res) => {
  try {
    const { prompt, customerData } = req.body;

    if (!prompt) {
      console.log('Prompt is required for AI message generation');
      return res.status(400).json({ error: 'Prompt is required' });
    }

    // Construct a detailed prompt using customer data (if provided)
    let fullPrompt = prompt;
    if (customerData) {
      fullPrompt += ` Customer data: ${JSON.stringify(customerData)}.`;
    }
    fullPrompt += ' Keep the message concise, under 100 characters, and suitable for a marketing campaign.';

    // Call OpenAI GPT-3.5 Turbo API
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'user',
            content: fullPrompt,
          },
        ],
        max_tokens: 50, // Adjusted for a concise message
        temperature: 0.7,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
      }
    );

    let generatedMessage = response.data.choices[0]?.message?.content.trim() || '';
    if (!generatedMessage) {
      throw new Error('No message generated by AI');
    }

    // Clean up the message: ensure itâ€™s concise
    generatedMessage = generatedMessage.split('.')[0].substring(0, 100); // First sentence, max 100 chars

    console.log('AI message generated successfully:', generatedMessage);
    res.status(200).json({ message: generatedMessage });
  } catch (error) {
    console.log('Error generating AI message:', error.message);
    res.status(500).json({ error: 'Failed to generate message with AI' });
  }
});

export default router;
